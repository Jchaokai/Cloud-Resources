镜像相关命令
	docker images
	docker images -q	//查看所有镜像ID
	docker rmi `docker images -q` //删除所有镜像
	docker images rm  `docker images -q` //删除所有镜像
	docker search [name]
	docker pull [name:version]
	docker commit  -m "修改信息" -p(制作镜像时暂停容器的运行) mynginx:0.1  新的镜像信息
	// 容器中挂载加入的文件不会写入到新的镜像里
	docker save -o 压缩文件名.tar  mynginx:0.1
	docker load -i 压缩文件

容器相关命令
	docker ps 
	docker ps -a 
	docker ps -aq	//查看所有容器的ID
	docker run -d(后台运行) 	--name mynginx 	-p 80:80 	nginx:latest
	docker run -it(可以终端,退出后，容器Exited) 	--name mynginx 	-p 80:80 	nginx:latest 	/bin/bash
	docker run -d -rm(关闭后删除容器) 	--name mynginx 	-p 80:80 	nginx:latest 	/bin/bash
	
	docker exec -it mynginx /bin/bash

	docker stop mynginx
	docker start mynginx
	docker kill mynginx
	docker rm mynginx
	docker rm `docker ps -aq`	//删除所有容器

	docker inspect mynginx
	docker inspect {{.XXXX.XX}} mynginx

容器的数据卷
	数据卷是宿主机的一个文件或目录
	当容器目录和数据卷绑定后，对方的修改会立即同步
	一个数据卷可以被多个容器 link
	一个容器可以link 多个数据卷

	配置数据卷：
		docker run -v [宿主机目录:容器目录的绝对路径] -v [宿主机目录:容器目录的绝对路径]  . . .


数据卷容器
	多个容器进行数据交换：
		1. 多个容器挂载到 宿主机的统一目录下，实现数据同步
		2. 数据卷容器

		c1 ------
				|
				c3------> 数据卷 		c3容器就是数据卷容器
				|
		c2 ------


		docker run --name c3 -d 	-v /数据卷目录  		mynginx 
		docker run --name c1 -d 	--volumn-from 	c3 	mynginx 
		docker run --name c2 -d 	--volumn-from 	c3 	mynginx 


Dockerfile
	样例:
		自定义centod7镜像，要求：
		1.默认登陆路径位 /usr
		2.可以使用vim

		FORM centos:latest
		RUN yum install -y vim
		WORKDIR /usr
		CMD /bin/bash



搭建docker私有仓库
	docker pull registry
	docker run --name registry -d -p 5000:5000 registry:latest

查看私有仓库
	http://私有仓库服务器ip:5000/v2/_catalog

上传镜像
	首先将私有仓库设置为  "信任私有仓库地址"
	1. vi /etc/docker/daemon.json
	2. 添加key  "insecure-registries":["私有仓库服务器ip:5000"]
	3. 重启docker服务
		systmctl restart docker

	标记为私有仓库镜像
	docker tag  centos:latest   私有仓库服务器ip:5000/centos:latest
	docker push  私有仓库服务器ip:5000/centos:latest

拉取镜像	
docker pull  私有仓库服务器ip:5000/centos:latest



docker 五层驱动
	Docker最开始采用AUFS作为文件系统，也得益于AUFS分层的概念，实现了多个
	Container可以共享同一个image。但由于AUFS未并入Linux内核，且只支持Ubuntu，
	考虑到兼容性问题，在Docker 0.7版本中引入了存储驱动， 目前，Docker支持AUFS、
	Btrfs、Device mapper、OverlayFS、ZFS五种存储驱动。就如Docker官网上说的，没有
	单一的驱动适合所有的应用场景，要根据不同的场景选择合适的存储驱动，才能有效的
	提高Docker的性能。如何选择适合的存储驱动，要先了解存储驱动原理才能更好的判断

	相关原理
		写时复制  CoW 
			多个容器共享一个镜像的文件系统,当容器想要进行写操作时，
			从镜像复制要写的文件到自己的文件系统进行修改，不会修改镜像的源文件
			因此每个容器的文件系统里生成一个副本，相互隔离互不影响
			简单来说：容器里不修改源文件，copy副本进行修改
		用时分配
			是用在原本没有这个文件的场景，只有在要新写入一个文件时才分配空间。
			比如启动一个容器,并不是预先为它分配一些空间，而是文件写入时，才按需分配

	AUFS (another Union FS)
			文件级的存储驱动，将多层合并成单层的FS表示，简单来说就是支持
		将不同目录挂载到同一虚拟文件系统下的FS。
			这种FS可以一层一层的叠加修改文件，无论地下有多少层都是只读的，
		只有最上层是可写的。
			当需要修改一个文件时，AUFS创建该文件的副本（使用CoW将只读层的文件
		复制到可写层来修改，结果保存在可写层）
			在docker中只读层就是image镜像，可写层就是container容器
	
	Overlay
			linux kernel 3.18后支持的，也是一种 Union FS，与AUFS不同的是只有两层
		upper、lower文件系统，分别代表docker的镜像层和容器层。
			当需要修改一个文件时,CoW将文件从只读的lower复制到upper进行修改，
		结果也保存在upper。
			在docker中，底下的只读层就是image，可写层就是container

	Device mapper
			linux kernel 2.6.9后支持的，提供的一种从逻辑设备到物理设备的映射，
		在该机制下，用户很方便的根据自己的需要 制定实现 存储资源管理的策略。
			前面讲AUFS和OverlayFS都是文件级的存储，而Device mapper时块级存储，
		所有的操作都是直接对块进行操作，而不是文件。
			Device mapper驱动会先在块设备上创建一个资源池，然后在资源池上创建
		一个带有FS的基本设备，所有镜像都是这个基本设备的快照，而容器则是镜像
		的快照。所以在容器里的FS是资源池上基本设备FS的快照，并没有为容器分配空间。
			当要写入一个新文件时，在容器的镜像内 为其分配新的块并写入数据，也就是
		写时分配。当要修改已有文件时，再使用CoW为容器快照 分配块空间，将要修改的
		数据复制到在容器快照中 新的块里再进行修改。
			Device mapper 默认创建一个100G的文件 包含镜像和容器。每一个容器被限制
		在10G大小的卷内，可以自己配置调整

	BtrFS
			被称为下一代写时复制FS，并入linux kernel，也是文件级存储，但可以像
		Device mapper直接操作底层设备。
			BtrFS 把文件系统的一部分 配置为一个完整的子文件系统，称之为subVolume。
		那么采用subVolume，一个大的FS可以被划分为多个子文件系统，这些子文件系统共享
		底层的设备空间，需要磁盘空间时便从底层设备中分配，为了灵活利用设备空间，
		BtrFS 将磁盘空间划分为多个chunk。每个chunk可以使用不同的磁盘空间分配策略。
		比如某些chunk只存放metedata，某些chunk只存放数据。
			这种模型有很多优点，比如 BtrFS支持动态添加设备。 用户在系统中添加新的磁盘
		之后，可以使用 BtrFS的命令将该设备添加到文件系统中。
			BtrFS 把一个大的文件系统当成一个资源池，配置成多个完整的子文件系统，还可以
		还可以往资源池里加新的子文件系统，而基础镜像则是子文件系统的快照，每个子镜像和
		容器都有自己的快照，这些快照则都是subVolume的快照。
			在写入一个新文件时，为容器的快照里添加一个新的数据块，文件写在这个空间里，
		这个叫做用时分配。当要修改已有文件时，使用CoW复制分配一个新的空间，在新空间里变更
		数据，变更结束再更新相关的数据结构指向新 子文件系统和快照，原来的数据和快照没有
		指针指向，被覆盖

	ZFS
			一个革命性的全新的文件系统，它从根本上改变了文件系统的管理方式，ZFS完全抛弃
		了"卷管理"，不再创建虚拟的卷集目录，而是把所有设备集中到一个存储池中进行管理，用
		存储池的概念来管理物理存储空间。过去，文件系统都是构架在物理设备上。为了管理这些物
		理设备，并为数据提供冗余，"卷管理"的概念提供了一个单设备的映像。而ZFS创建在虚拟的
		被称为 "zpools"的存储池上。每个存储池由若干个虚拟设备组成。 这些虚拟设备可以是原
		始磁盘，也可能是一个RAID1镜像设备，或是非标准RAID等级的多磁盘组。于是zpool上的文
		件系统可以使用这些虚拟设备的总存储容量。
			下面看一下在Docker里ZFS的使用。首先从zpool里分配一个ZFS文件系统给镜像的基础
		层，而其他镜像层则是这个ZFS文件系统快照的克隆，快照是只读的，而克隆是可写的，当
		容器启动时则在镜像的最顶层生成一个可写层






