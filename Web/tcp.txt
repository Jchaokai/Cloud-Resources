tcp三次握手

	第一次握手：建立连接时，客户端发送syn包（syn=x）到服务器，并进入
	syn_sent状态，等待服务器确认。 （syn:同步序列编号）

	第二次握手：服务器收到syn包，必须确认客户syn（ack=x+1），同时自己
	也发送一个syn包（syn=y），即syn+ack包，此时服务器进入syn_recv状态

	第三次握手：客户端收到服务器的syn+ack包，向服务器发送确认包
	（ack=y+1），此包发送完毕，客户端和服务器进入established(tcp连接成功)，
	完成三次握手。

	一个很类似的例子就是投简历：
	- 先投简历，
	- 然后对方公司会通知你通过简历筛选，
	- 你收到这个通知后一般会回复一下我知道了。 
	这种“让我知道你已经知道了”的想法是一种约定俗成的可靠信息交互的基本方式，
	基于此想法构建的信息交互框架叫做协议。

	为什么不是两次握手
		如果一个请求报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次
		建立连接，这将导致不必要的错误和资源的浪费。如果采用的是三次握手，就算是那
		一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但
		是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。

四次挥手
	1. 客户端请求释放连接（fin=1），客户端进入fin-wait-1状态。
	2. 服务器确认（ack=1），服务器进入close-wait状态。客户端收到服务器的确认后，进入fin-wait-2状态。
	3. 服务器将最后的数据发送完毕后，就向客户端发送 "连接释放报文"，fin=1，ack=1
	4. 客户端收到服务器的 "连接释放报文"，必须确认ack=1，客户端进入time-wait状态，
	   服务器只要收到客户端发送的确认，立即进入closed状态

	4次挥手
	(第一次):A说 我说完了,你还有话说吗
	(第二次):B说 我知道你没话说了,但我还有一句话
	(第三次):B说 说完了,想说的都说了,我要挂了
	(第四次):A说 好,你挂吧。  B挂







